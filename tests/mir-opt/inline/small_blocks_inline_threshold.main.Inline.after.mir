// MIR for `main` after Inline

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at $DIR/small_blocks_inline_threshold.rs:+0:11: +0:11
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+1:7: +1:8
    let mut _2: std::env::Args;          // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+1:25: +1:36
    let _3: bool;                        // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:32
    let mut _4: std::result::Result<bool, std::str::ParseBoolError>; // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
    let mut _5: &str;                    // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
    let _6: &str;                        // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
    let mut _7: &std::string::String;    // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
    let _8: &std::string::String;        // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:7
    let mut _9: &std::vec::Vec<std::string::String>; // in scope 0 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:4
    scope 1 {
        debug a => _1;                   // in scope 1 at $DIR/small_blocks_inline_threshold.rs:+1:7: +1:8
        scope 4 (inlined <String as Deref>::deref) { // at $DIR/small_blocks_inline_threshold.rs:16:3: 16:23
            debug self => _7;            // in scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
            let mut _13: &[u8];          // in scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
            let _14: &[u8];              // in scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
            let mut _15: &std::vec::Vec<u8>; // in scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
            let _16: &std::vec::Vec<u8>; // in scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
            scope 5 {
                scope 6 (inlined from_utf8_unchecked) { // at $SRC_DIR/alloc/src/string.rs:LL:COL
                    debug v => _13;      // in scope 6 at $SRC_DIR/core/src/str/converts.rs:LL:COL
                    let mut _17: &[u8];  // in scope 6 at $SRC_DIR/core/src/str/converts.rs:LL:COL
                    scope 7 {
                    }
                }
            }
        }
        scope 8 (inlined core::str::<impl str>::parse::<bool>) { // at $DIR/small_blocks_inline_threshold.rs:16:8: 16:23
            debug self => _5;            // in scope 8 at $SRC_DIR/core/src/str/mod.rs:LL:COL
            let mut _18: &str;           // in scope 8 at $SRC_DIR/core/src/str/mod.rs:LL:COL
        }
    }
    scope 2 (inlined <Args as Iterator>::collect::<Vec<String>>) { // at $DIR/small_blocks_inline_threshold.rs:15:37: 15:46
        debug self => _2;                // in scope 2 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL
        let mut _10: std::env::Args;     // in scope 2 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL
        scope 3 (inlined <Vec<String> as FromIterator<String>>::from_iter::<Args>) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL
            debug iter => _10;           // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
            let mut _11: std::env::Args; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
            let mut _12: std::env::Args; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at $DIR/small_blocks_inline_threshold.rs:+1:7: +1:8
        StorageLive(_2);                 // scope 0 at $DIR/small_blocks_inline_threshold.rs:+1:25: +1:36
        _2 = args() -> bb6;              // scope 0 at $DIR/small_blocks_inline_threshold.rs:+1:25: +1:36
                                         // mir::Constant
                                         // + span: $DIR/small_blocks_inline_threshold.rs:15:25: 15:34
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &(*_8);                     // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
        StorageLive(_13);                // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageLive(_14);                // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageLive(_15);                // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageLive(_16);                // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        _16 = &((*_7).0: std::vec::Vec<u8>); // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        _15 = _16;                       // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        _14 = <Vec<u8> as Deref>::deref(move _15) -> [return: bb9, unwind: bb4]; // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/alloc/src/string.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:31: +2:32
        StorageDead(_8);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:32: +2:33
        StorageDead(_6);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:32: +2:33
        StorageDead(_3);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:32: +2:33
        _0 = const ();                   // scope 0 at $DIR/small_blocks_inline_threshold.rs:+0:11: +3:2
        drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/small_blocks_inline_threshold.rs:+3:1: +3:2
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at $DIR/small_blocks_inline_threshold.rs:+3:1: +3:2
        return;                          // scope 0 at $DIR/small_blocks_inline_threshold.rs:+3:2: +3:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at $DIR/small_blocks_inline_threshold.rs:+3:1: +3:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at $DIR/small_blocks_inline_threshold.rs:+0:1: +3:2
    }

    bb6: {
        StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL
        _10 = move _2;                   // scope 2 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL
        StorageLive(_11);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        StorageLive(_12);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        _12 = move _10;                  // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        _11 = <Args as IntoIterator>::into_iter(move _12) -> [return: bb7, unwind: bb5]; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
                                         // + literal: Const { ty: fn(Args) -> <Args as IntoIterator>::IntoIter {<Args as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        StorageDead(_12);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        _1 = <Vec<String> as vec::spec_from_iter::SpecFromIter<String, Args>>::from_iter(move _11) -> [return: bb8, unwind: bb5]; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Vec<String> as vec::spec_from_iter::SpecFromIter<String, Args>>::from_iter}, val: Value(<ZST>) }
    }

    bb8: {
        StorageDead(_11);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
        StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL
        StorageDead(_2);                 // scope 0 at $DIR/small_blocks_inline_threshold.rs:+1:45: +1:46
        StorageLive(_3);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:32
        StorageLive(_4);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
        StorageLive(_5);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
        StorageLive(_6);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
        StorageLive(_7);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
        StorageLive(_8);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:7
        StorageLive(_9);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:4
        _9 = &_1;                        // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:4
        _8 = <Vec<String> as Index<usize>>::index(move _9, const 8_usize) -> [return: bb1, unwind: bb4]; // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:7
                                         // mir::Constant
                                         // + span: $DIR/small_blocks_inline_threshold.rs:16:3: 16:7
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = _14;                       // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageDead(_15);                // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/str/converts.rs:LL:COL
        _17 = _13;                       // scope 7 at $SRC_DIR/core/src/str/converts.rs:LL:COL
        _6 = transmute::<&[u8], &str>(move _17) -> [return: bb10, unwind: bb4]; // scope 7 at $SRC_DIR/core/src/str/converts.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/str/converts.rs:LL:COL
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8]) -> &str {transmute::<&[u8], &str>}, val: Value(<ZST>) }
    }

    bb10: {
        StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/str/converts.rs:LL:COL
        StorageDead(_13);                // scope 5 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageDead(_16);                // scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
        StorageDead(_14);                // scope 4 at $SRC_DIR/alloc/src/string.rs:LL:COL
        _5 = &(*_6);                     // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:23
        StorageDead(_9);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:6: +2:7
        StorageDead(_7);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:6: +2:7
        StorageLive(_18);                // scope 8 at $SRC_DIR/core/src/str/mod.rs:LL:COL
        _18 = _5;                        // scope 8 at $SRC_DIR/core/src/str/mod.rs:LL:COL
        _4 = <bool as FromStr>::from_str(move _18) -> [return: bb11, unwind: bb4]; // scope 8 at $SRC_DIR/core/src/str/mod.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<bool, <bool as FromStr>::Err> {<bool as FromStr>::from_str}, val: Value(<ZST>) }
    }

    bb11: {
        StorageDead(_18);                // scope 8 at $SRC_DIR/core/src/str/mod.rs:LL:COL
        StorageDead(_5);                 // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:22: +2:23
        _3 = Result::<bool, ParseBoolError>::unwrap(move _4) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/small_blocks_inline_threshold.rs:+2:3: +2:32
                                         // mir::Constant
                                         // + span: $DIR/small_blocks_inline_threshold.rs:16:24: 16:30
                                         // + literal: Const { ty: fn(Result<bool, ParseBoolError>) -> bool {Result::<bool, ParseBoolError>::unwrap}, val: Value(<ZST>) }
    }
}
